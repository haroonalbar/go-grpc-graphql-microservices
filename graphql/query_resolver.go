package main

import (
	"context"
	"log"
	"time"
)

type queryResolver struct {
	server *Server
}

// Orders is in accounts_resolver cause it's depandant on account

// Accounts takes in pagination and id cause that's the signature we defined in graphql.schema
// and generated by gqlgen
// This can ither get a single accout or multiple accounts
func (r *queryResolver) Accounts(ctx context.Context, pagination *PaginationInput, id *string) ([]*Account, error) {
	ctx, cancel := context.WithTimeout(ctx, 3*time.Second)
	defer cancel()

	// single
	if id != nil {
		acc, err := r.server.accountClient.GetAccount(ctx, *id)
		if err != nil {
			log.Println("Error while getting account: ", err)
			return nil, err
		}
		return []*Account{{
			ID:   acc.ID,
			Name: acc.Name,
		}}, nil
	}

	// multiple
	var skip, take uint64
	var accounts []*Account
	if pagination != nil {
		skip, take = pagination.bounds()
	}
	accountList, err := r.server.accountClient.GetAccounts(ctx, skip, take)
	if err != nil {
		log.Println("Error getting accounts from account client: ", err)
		return nil, err
	}

	for _, a := range accountList {
		accounts = append(accounts, &Account{
			ID:   a.ID,
			Name: a.Name,
		})
	}

	return accounts, nil
}

// Products samething as Accounts with extra parameter query that's also defined in schema
func (r *queryResolver) Products(ctx context.Context, pagination *PaginationInput, query *string, id *string, ids []string) ([]*Product, error) {
	ctx, cancel := context.WithTimeout(ctx, 3*time.Second)
	defer cancel()
	// single
	if *id != "" {
		p, err := r.server.catalogClient.GetProduct(ctx, *id)
		if err != nil {
			log.Println("Error getting product from catalog client : ", err)
			return nil, err
		}
		return []*Product{{
			ID:          p.ID,
			Name:        p.Name,
			Description: p.Description,
			Price:       p.Price,
		}}, nil
	}

	// multiple
	var skip, take uint64
	if pagination != nil {
		skip, take = pagination.bounds()
	}

	var q string
	if query != nil {
		q = *query
	}

	if len(ids) == 0 {
		ids = nil
	}

	productList, err := r.server.catalogClient.GetProducts(ctx, skip, take, ids, q)
	if err != nil {
		log.Println("Error getting products from catalog client: ", err)
		return nil, err
	}

	var products []*Product
	for _, p := range productList {
		products = append(products, &Product{
			ID:          p.ID,
			Name:        p.Name,
			Description: p.Description,
			Price:       p.Price,
		})
	}
	return products, nil
}

func (p PaginationInput) bounds() (uint64, uint64) {
	skipValue := uint64(0)
	takeValue := uint64(0)
	if p.Skip != nil {
		skipValue = uint64(*p.Skip)
	}
	if p.Take != nil {
		takeValue = uint64(*p.Take)
	}
	return skipValue, takeValue
}
